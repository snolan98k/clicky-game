{"version":3,"sources":["components/Scoreboard/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","react_default","a","createElement","className","title","score","topScore","Cards","onClick","clickedImage","id","alt","artist","src","image","year","shuffle","array","i","length","j","Math","floor","random","_ref","App","state","paintings","showAlert","showSuccess","clickedpaintings","_this","setState","indexOf","push","console","log","handleIncrement","makeShuffle","_this2","this","style","opacity","components_Scoreboard","map","painting","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g6GAmBeA,MAhBf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAoBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,QAC9CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAqBH,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMM,QAC1DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAqBH,EAAAC,EAAAC,cAAA,4BAAoBH,EAAMO,YAEhEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,mFCOSK,SAjBD,SAAAR,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,QAAS,kBAAMT,EAAMU,aAAaV,EAAMW,MAC5DV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,OAAQC,IAAKd,EAAMe,QACnCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZJ,EAAMK,MACPJ,EAAAC,EAAAC,cAAA,WAFF,KAIEF,EAAAC,EAAAC,cAAA,WACCH,EAAMa,OALT,OAKqBb,EAAMgB,WCPnC,SAASC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADDM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,MA0GMQ,6MAtGbC,MAAQ,CACNC,YACAtB,MAAO,EACPC,SAAU,EACVsB,UAAW,EACXC,YAAa,EACbC,iBAAkB,MAGpBrB,aAAe,SAAAC,GAEb,IAAIoB,EAAmBC,EAAKL,MAAMI,iBAC9BzB,EAAQ0B,EAAKL,MAAMrB,MACnBC,EAAWyB,EAAKL,MAAMpB,SAC1ByB,EAAKC,SAAS,CACZJ,UAAW,KAIyB,IAAlCE,EAAiBG,QAAQvB,IAE3BoB,EAAiBI,KAAKxB,GACtByB,QAAQC,IAAIN,GAEZC,EAAKM,kBAELN,EAAKO,eACyB,KAArBP,EAAKL,MAAMrB,MAEpB0B,EAAKC,SAAS,CACZH,YAAa,EACbxB,MAAO,EACPyB,iBAAkB,MAIpBC,EAAKC,SAAS,CACZ3B,MAAO,EACPyB,iBAAkB,KAEpBK,QAAQC,IAAI,aACZL,EAAKC,SAAS,CACZJ,UAAW,KAIXvB,EAAQC,GACVyB,EAAKC,SAAS,CACZ1B,SAAUD,OAMhBgC,gBAAkB,WAEhBN,EAAKC,SAAS,CAAE3B,MAAO0B,EAAKL,MAAMrB,MAAQ,OAI5CiC,YAAc,WACZP,EAAKC,SAAS,CAAEL,UAAWX,EAAQW,8EAG5B,IAAAY,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,qBACVsC,MAAO,CAAEC,QAASF,KAAKd,MAAME,YAF/B,6CAMA5B,EAAAC,EAAAC,cAAA,OACEC,UAAU,sBACVsC,MAAO,CAAEC,QAASF,KAAKd,MAAMG,cAF/B,iDAMA7B,EAAAC,EAAAC,cAACyC,EAAD,CACEvC,MAAM,mBACNC,MAAOmC,KAAKd,MAAMrB,MAClBC,SAAUkC,KAAKd,MAAMpB,WAEvBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZqC,KAAKd,MAAMC,UAAUiB,IAAI,SAAAC,GAAQ,OAChC7C,EAAAC,EAAAC,cAAC4C,EAAD,CACEC,IAAKF,EAASnC,GACdA,GAAImC,EAASnC,GACbE,OAAQiC,EAASjC,OACjBR,MAAOyC,EAASzC,MAChBW,KAAM8B,EAAS9B,KACfD,MAAO+B,EAAS/B,MAChBL,aAAc8B,EAAK9B,0BA9FfuC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3bb98643.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./scoreboard.css\";\r\n\r\nfunction Scoreboard(props) {\r\n  return (\r\n    <header className=\"scoreB\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 col-left\"><h5>{props.title}</h5></div>\r\n        <div className=\"col-md-3 col-right\"><h6>High Score {props.score}</h6></div>\r\n        <div className=\"col-md-3 col-right\"><h6>Current Score: {props.topScore}</h6></div>\r\n      </div>\r\n      <div className=\"row\">\r\n      <div className=\"col-md-12 col-right\">\r\n      <h6>Click on a famous art work, but don't click on it more than once!</h6></div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Cards = props => (\r\n  <div className=\"card\" onClick={() => props.clickedImage(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.artist} src={props.image} />\r\n      <div className=\"overlay\">\r\n        <div className=\"text\">\r\n          {props.title}\r\n          <br />\r\n          by \r\n          <br />\r\n          {props.artist} in {props.year}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Cards;","import React, { Component } from \"react\";\r\nimport paintings from \"./cards.json\";\r\nimport Scoreboard from \"./components/Scoreboard\";\r\nimport Card from \"./components/Card\";\r\n\r\n// shuffle upon each click\r\nfunction shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    paintings,\r\n    score: 0,\r\n    topScore: 0,\r\n    showAlert: 0,\r\n    showSuccess: 0,\r\n    clickedpaintings: []\r\n  };\r\n\r\n  clickedImage = id => {\r\n    // assign the state of the empty array to a let to be updated\r\n    let clickedpaintings = this.state.clickedpaintings;\r\n    let score = this.state.score;\r\n    let topScore = this.state.topScore;\r\n    this.setState({\r\n      showAlert: 0\r\n    });\r\n\r\n    // if the clicked image has an id of the indexed paintings\r\n    if (clickedpaintings.indexOf(id) === -1) {\r\n      // push that id into that id into the array to be stored\r\n      clickedpaintings.push(id);\r\n      console.log(clickedpaintings);\r\n      // run the score function\r\n      this.handleIncrement();\r\n      // run the reshuffle function after each click\r\n      this.makeShuffle();\r\n    } else if (this.state.score === 12) {\r\n      // alert player wins\r\n      this.setState({\r\n        showSuccess: 1,\r\n        score: 0,\r\n        clickedpaintings: []\r\n      });\r\n    } else {\r\n      // alert player loss\r\n      this.setState({\r\n        score: 0,\r\n        clickedpaintings: []\r\n      });\r\n      console.log(\"duplicate\");\r\n      this.setState({\r\n        showAlert: 1\r\n      });\r\n    }\r\n\r\n    if (score > topScore) {\r\n      this.setState({\r\n        topScore: score\r\n      });\r\n    }\r\n  };\r\n\r\n  // handleIncrement increases this.state.score by 1\r\n  handleIncrement = () => {\r\n    // setState updates a components states\r\n    this.setState({ score: this.state.score + 1 });\r\n  };\r\n\r\n  // shuffle up images\r\n  makeShuffle = () => {\r\n    this.setState({ paintings: shuffle(paintings) });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div\r\n          className=\"alert alert-danger\"\r\n          style={{ opacity: this.state.showAlert }}\r\n        >\r\n          You clicked on this already, try again...\r\n          </div>\r\n        <div\r\n          className=\"alert alert-success\"\r\n          style={{ opacity: this.state.showSuccess }}\r\n        >\r\n          Brilliant, you haven't clicked on duplicates!\r\n          </div>\r\n        <Scoreboard\r\n          title=\"MoMA clicky Game\"\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n        />\r\n        <div className=\"row\">\r\n          {this.state.paintings.map(painting => (\r\n            <Card\r\n              key={painting.id}\r\n              id={painting.id}\r\n              artist={painting.artist}\r\n              title={painting.title}\r\n              year={painting.year}\r\n              image={painting.image}\r\n              clickedImage={this.clickedImage}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}